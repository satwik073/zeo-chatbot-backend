What is Segment?
With Segment, you can collect, transform, send, and archive yourfirst-party customer data. Segment simplifies the process of collecting data and connecting new tools, allowing you to spend more time using your data, and less time trying to collect it. You can use Segment to track events that happen when a user interacts with the interfaces. “Interfaces” is Segment’s generic word for any digital properties you own: your website, mobile apps, and processes that run on a server or OTT device.
When you capture interaction data in Segment, you can send it (often in real-time) to your marketing, product, and analytics tools, as well as to data warehouses. In most cases, you won’t even need to touch your tracking code to connect to new tools.
Let's walk through the steps to get up and running on Segment. Let's go!
This page was last modified: 14 Dec 2021
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
What is Segment?
With Segment, you can collect, transform, send, and archive yourfirst-party customer data. Segment simplifies the process of collecting data and connecting new tools, allowing you to spend more time using your data, and less time trying to collect it. You can use Segment to track events that happen when a user interacts with the interfaces. “Interfaces” is Segment’s generic word for any digital properties you own: your website, mobile apps, and processes that run on a server or OTT device.
When you capture interaction data in Segment, you can send it (often in real-time) to your marketing, product, and analytics tools, as well as to data warehouses. In most cases, you won’t even need to touch your tracking code to connect to new tools.
Let's walk through the steps to get up and running on Segment. Let's go!
This page was last modified: 14 Dec 2021
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Testing and Debugging
On this page
One of the most important questions you’ll ask early on is“How do I know if Segment is working?”
There are several ways to check if your data is flowing. One is theDebugger tab in each Sourcein the Segment web app, where you can see data coming from a source into Segment. Another is theEvent Delivery toolwhich shows which data is arriving at specific destinations.
For monitoring purposes, you’ll also see alerts in theWorkspace Healthtool if your sources or destinations produce repeated errors.
Want more? Check out our course on debugging and troubleshooting. (Must be logged in to access.)
The Source Debugger
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive to your Segment Source, so you can troubleshoot your Segment set up even quicker. With the Debugger, you can check that you’re sending calls in the expected format, without having to wait for any data processing.

The Debugger is separate from your workspace’s data pipeline and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
To see a more complete view of all your events, we recommend that you set up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving into the Source, but you can also pause the stream from displaying new events by toggling “Live” to “Pause”. Events continue to arrive to your Source while you Pause the stream.
You can search in the Debugger to find a specific payload using any information you know is available in the event’s raw payload. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Event Delivery
The Event Delivery tool helps you see if Segment is encountering issues delivering your data from your sources to their connected destinations.
Segment sends billions of events to destinations every week. If our systems encounter errors when trying to deliver your data, we report them in the Event Delivery tool.
Here is an example of what the Event Delivery tool looks like:

Event Delivery is most useful when:
You can access the Event Delivery tool from the destinationSettingstab in any supported destination.

Event Delivery is only available for cloud-mode destinations, which receive data through the Segment servers. Device-mode destinations receive data through an API endpoint outside the Segment servers, where we cannot monitor or report on it.Event delivery is not available for Warehouses or Amazon S3 destinations.
Using Event Delivery
The UI shows three parts that report on Segment’s ability to deliver your source data: Key Metrics, Error Details, and Delivery Trends.
Before you begin,select a time period from the drop down menu at the right. The Event Delivery display updates to show only information about your selected time period.

This panel displays quantitative information about the destination’s data flow:
Delivered:The number of messages Segment successfully delivered to the destination in the selected time period.
Not Delivered:The number of messages Segment was unable to deliver. If this number is greater than zero, the reasons for these failures appear in the errors table below.
P95 Latency:The time it takes for Segment to deliver the slowest 5% of your data (known as P95 latency). The latency reported is end-to-end: from the event being received through the Segment API, to the event being delivered to partner API. This helps tell you if there is a delay in your data pipeline, and how severe it is.
The Error details table displays a summary of the errors in a given period, and the most important information about them. You can click any row in the table to expand it to show more information.

The Error Details view gives you as much information as possible to help you resolve the issue. The example below shows an example Error Details panel.

This view includes:
You Sent- the data you sent to Segment’s API.
Request to Destination- the request Segment made to the Partner API. This payload will likely be different from what you sent it because Segment is mapping your event to the partner’s spec to ensure the message is successfully delivered.
Response from Destination- the response Segment received from the Partner API. This will have the raw partner error. If you need to troubleshoot an issue with a Partner’s Success team, this is usually something they’ll want to see.
View Segment’s list ofIntegration Error Codesfor more information about what might cause an error.
Trends
When debugging, it’s helpful to see when issues start, stop and how they trend over time.
The Event Delivery view shows a graph with the following information:
Delivered: The number of events that were successfully delivered in the time period you selected.
Not delivered: The number of events that were not successfully delivered in the time period you selected.
The Latency view shows the end-to-end P95 latency during the time period you selected.

Unlock the power of Segment with Destinations
Learn about what you can do next with Segment
This page was last modified: 06 Jul 2022
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
What's Next
On this page
You’re just getting started with Segment, but there’s so much more to explore!
Privacy tools and filtering
Segment includes a free suite of Privacy tools to help your organization comply with regulations like the GDPR and the CCPA.
ThePrivacy Portalallows you to easily audit, monitor, and enforce privacy rules against your Segment data, to proactively protect your customers.
Improve data quality with Protocols
You had a taste of the planning needed to set up clear, consistent, reliable and extensible data schemas inPlanning a Full Install.
Business tier customers can use Segment’sProtocolspackage to help with this process, to keep track of what data is being collected where, and to normalize their data as it flows through Segment. Clean, consistent data helps you move faster to build marketing campaigns and act on analytics insights.
With Protocols, you can useTracking Plansto build consensus in your organization about which events and property you intend to collect across your web, mobile or server-side data sources. Once defined, you can connect the Tracking Plan to your Sources to automaticallyvalidatethe data is flowing correctly. You can also turn onenforcementto block bad data, and even fix incorrect data withTransformations.
Single view of the customer with Engage
Engageis a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
With Engage, you can create unified customer profiles, enrich those profiles with new traits, build Audiences using those profiles, and sync audiences to marketing tools to power personalized experiences, and better understand and market to your customers.
More learning resources
Segment Universityis Segment’s free, online classroom for learning the basics of Segment.
Analytics Academyis a series of lessons designed to help you understand the value of analytics as a discipline, and to help you think through your analytics needs, and get started creating robust and flexible analytics systems to help you grow.
Need ideas or prior art?Segment Recipesare some cool things you can do by hooking your Segment workspace up to different Destination tools. Everything from sending tailored onboarding emails, to joining and cleaning your data with third party tools
Other Resources
Still hungry for more? Check out our list ofother Segment Resources!
Technical Support
If you’re experiencing problems, have questions about implementing Segment, or want to report a bug, you can fill out oursupport contact form hereand our Product Support Engineers will get back to you.
You need a Segment account in order to file a support request. If you don’t already have a Segment account, you can sign up for a free workspace.
Back to the Getting Started index
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Use Cases Overview
On this page
Use Cases are pre-built Segment setup guides tailored to common business goals.
Use Cases eliminate guesswork with a structured approach to onboarding, helping you configure Segment correctly and align its features to your business objectives.
You can onboard to Segment with a Use Case if you’re a new Business Tier customer or haven’t yet connected a source and destination.
Onboard to Segment with Use Cases
Not sure where to start? Read through Segment's Choosing a Use Case guide, which breaks down the available business goals and their associated use cases.
Follow the steps in the Use Cases Setup guide to get up and running with Segment.
Looking for something more technical? View the Use Cases Reference, which lists the tracking events, connections, and destinations Segment recommends for each use case.
Take the next step
Explore the following core Segment features, all of which power Use Cases.
Collect event data from your mobile apps, websites, and servers.
Forward your data to the business tools and apps your business uses.
Track user interactions, resolve their identities, and explore Profiles.
Build, enrich, and activate audiences with Segment's personalization platform.
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Choosing a Use Case
On this page
Segment built Use Cases to streamline the process of implementing Segment for specific business objectives.
This guide will help you navigate through the available use cases and select the one that best aligns with your business goals.
You can onboard to Segment with a Use Case if you’re a new Business Tier customer or haven’t yet connected a source and destination.
Understanding business goals and use cases
Segment supports 25 use cases, organized into 4 main business goals:
These goals represent key ways businesses often use customer data for improved performance and growth.
Looking for a technical breakdown of each use case? View theUse Cases Reference.
Selecting your use case
Follow these steps to identify which use case to implement:
The use case you select will guide your Segment setup, including the events you’ll track and the integrations you’ll implement. However, Segment’s flexibility allows you to adapt and expand your strategy over time as your business needs evolve.
The following sections explore each business goal and associated use cases in detail.
Optimize advertising
TheOptimize advertisingbusiness goal focuses on improving the efficiency and effectiveness of your advertising efforts. By using your customer data effectively, you can create more targeted campaigns, reduce wasted ad spend, and increase your return on investment (ROI).
Key considerations for this goal:
Use cases in this category include:
Personalize first conversion
ThePersonalize first conversiongoal focuses on optimizing the initial interactions a potential customer has with your brand. By personalizing these early touchpoints, you can increase the likelihood of converting prospects into customers.
Key considerations for this goal:
Use cases in this category include:
Boost retention, upsell, and cross-sell
TheBoost retention, upsell, and cross-sellbusiness goal focuses on maximizing the value of your existing customer base. By analyzing customer behavior and preferences, you can create targeted strategies to encourage repeat purchases, introduce customers to higher-value products or services, and increase overall customer lifetime value.
Key considerations for this goal:
Use cases in this category include:
Personalize communications and product experiences
ThePersonalize communications and product experiencesbusiness goal focuses on creating tailored experiences for your customers across all touchpoints. With this business goal, you can create more relevant and engaging communications and product experiences, leading to increased satisfaction and loyalty.
Key considerations for this goal:
Use cases in this category include:
Next steps
Once you’ve selected a use case, follow theUse Cases Setup Guide, which explains how to set up a use case.
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Use Cases Setup
On this page
Use Cases help you onboard quickly and efficiently to Segment by guiding you through specific steps tailored to your business needs.
This page walks you through the steps to set up a use case in your Segment instance.
Permissions
To implement a use case, you’ll need to be a Workspace Owner for your Segment account. See theRolesdocumentation for more information.
You can onboard to Segment with a Use Case if you’re a new Business Tier customer or haven’t yet connected a source and destination.
Use case setup overview
From a high level, setting Segment up with a use case takes place in four stages:
Example setup: Personalize winback
This section provides a detailed, step-by-step guide to setting up thePersonalize Winbackuse case from thePersonalize communications and product experiencesbusiness goal in your Segment account. All use cases follow this same setup flow.
Step 1: Navigate to Use Cases
Step 2: Pick your business goal and select a use case
Choosing a use case
Segment lets you implement one use case. If you’re not sure which use case to choose, viewChoosing a Use Case.
For most cases, you’ll want to start with development or staging sources to test and debug your Segment implementation. This approach lets you verify that everything is working correctly before sending live data downstream. To facilitate this, Segment automatically creates development (dev) and production (prod) spaces for you and labels your sources accordingly to simplify tracking.
Segment strongly recommends beginning your setup in the dev environment. This allows for thorough testing and debugging of your configuration. Once you’re confident in your dev setup, Segment will guide you on how to apply these configurations to your live production sources.
Step 3: Review suggested events
Changing your use case
Once you’ve reviewed the suggested events for a use case, you won’t be able to change the use case. If you want to see a full breakdown of each use case before commiting to one, clickChange use caseto begin the use case flow again. You can also view theUse Cases Reference guideto see what Segment recommends for each use case.
On theSetup checklistpage, you’ll see the full checklist for the use case you’ve chosen. This checklist applies to all use cases, though the suggested events, sources, and destinations differ between use cases.
This table shows Segment’s recommended events and properties for the Personalize winback use case:
Make sure that you’re tracking these events to get the most of the Personalize winback campaign. For more information on event tracking, seeData Collection Best Practices.
Step 4: Connect dev sources
You’re now ready to connect sources to your dev environment.
Adding a warehouse as a souce
If you connect a warehouse as a source, Segment automatically creates a Profiles destination that shows up in theConnect your datatab. Do not delete this destination, as Segment requires this destination to create profiles from your warehouse.
Cloud object sources
If you connect a cloud object source, you’ll need to create a warehouse to sync profiles into Segment. For more information, seeCloud Sources.
Step 5: Connect dev destinations
With sources connected, you can now connect destinations to your dev environment.
Step 6: Publish your setup to a prod environment
Until this point, you’ve set up event tracking and connected sources and destinations to a development environment.
After you’ve confirmed that data is flowing from your sources into your destinations as expected, you’re ready to publish your setup to a production environment.
Your data is now in production, and you’ve successfully configured Segment.
Activate your data with Unify and Engage
Now that you’ve successfully set up Connections and Destinations, you can build upon your Segment implementation with Unify and Engage.
Accessing Unify and Engage
Unify and Engage may not yet be enabled for your account. To add Engage to your Segment workspace, clickRequest a demoin the Unify and Engage tabs on the Guided Setup page.
Step 1: Set up identifiers with Unify
Your identifiers are now set up in your dev space, though it could take a few minutes for Segment to create profiles from your selected identifiers.
For more information, see theUnify documentation.
Step 2: Create audiences with Engage
Segment then begins sending your new audience(s) to the destinations in your dev environment. Verify in those destinations that the audiences are coming through as intended, then clickMark complete.
For more information on Audiences, see theEngage documentation.
Step 3: Republish to a prod environment
At this point, you’ll have already published your initial setup to a prod environment. Next, you’ll publish your Unify and Engage setup to the same prod environment.
Segment then begins sending your new audience(s) to the destinations in your dev environment. Verify in those destinations that your audiences are coming through as intended, then clickMark complete.
Next steps
Use Cases pulls together a number of core Segment features, likeSources,Destinations,data collection, andReverse ETL. View the documentation for each to learn how you can continue to expand and build on what you’ve alreay achieved.
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Use Cases Reference
On this page
This reference guide provides detailed information on the suggested events, sources, and destinations for each Segment use case. Use this guide to ensure you’re tracking the right events and connecting the best sources and destinations for your specific needs.
Use Cases by business goal
The business goal you select during onboarding determines the use cases that Segment shows you.
This table lists each business goal and each of its corresponding use cases:
Suggested events, sources, and destinations
This section contains tables for the different events, sources, and destinations that Segment recommends for each use case.
Optimize advertising
Click on each use case in this section to view Segment’s recommendations for the Optimize advertising business goal, which helps you improve return on ad spend.
This table shows the event and properties Segment recommends you track for the Build high value lookalikes use case, which helps you build from high-value purchasers through specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build high-value lookalikes use case:
This table shows the events and properties Segment recommends you track for the Build lookalikes for app install use case, which helps you build lookalikes from app installers in specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build lookalikes for app install use case:
This table shows the events and properties Segment recommends you track for the Increase signups with lookalikes use case, which helps you build lookalikes from signups through specific channels.:
And this table shows the source and destination types that Segment recommends you set up for the Increase signups with lookalikes use case:
This table shows the events and properties Segment recommends you track for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the event and properties Segment recommends you track for the Suppress based on time use case, which helps you suppress users after a few days to keep campaigns fresh:
And this table shows the source and destination types that Segment recommends you set up for the Suppress based on time use case:
This table shows the events and properties Segment recommends you track for the Suppress with purchase use case, which helps you suppress converted users immediately after a conversion:
And this table shows the source and destination types that Segment recommends you set up for the Suppress with purchase use case:
Personalize first conversion
Click on each use case in this section to view Segment’s recommendations for the Personalize first conversion business goal, which helps you convert prospective or free customers.
This table shows the events and properties Segment recommends you track for the Accelerate app install use case, which helps you encourage app install with personalized messaging:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate app install use case:
This table shows the events and properties Segment recommends you track for the Accelerate onboarding use case, which helps you optimize new user activation based on real-time behavior:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate onboarding use case:
This table shows the events and properties Segment recommends you track for the Accelerate signup use case, which helps you encourage anonymous users to sign up with messaging:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate signup use case:
This table shows the events and properties Segment recommends you track for the Acquire paid subscriptions use case, which helps you engage customers at the right time to drive conversions:
And this table shows the source and destination types that Segment recommends you set up for the Acquire paid subscriptions use case:
This table shows the events and properties Segment recommends you track for the Convert trials to paid subscriptions use case, which helps you get customers to upgrade through personalized messaging:
And this table shows the source and destination types that Segment recommends you set up for the Convert trials to paid subscriptions use case:
This table shows the events and properties Segment recommends you track for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate cart abandonment use case:
Boost retention, upsell, and cross-sell
Click on each use case in this section to view Segment’s recommendations for the Boost retention, upsell, and cross-sell business goal, which helps you increase repeat visits or purchases.
This table shows the event and properties Segment recommends you track for the Build high value lookalikes use case, which helps you build from high-value purchasers through specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build high value lookalikes use case:
This table shows the events and properties Segment recommends you track for the Increase repeat purchases use case, which helps you convert single-purchase buyers with personalized communications:
And this table shows the source and destination types that Segment recommends you set up for the Increase repeat purchases use case:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest-value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the events and properties Segment recommends you track for the Nurture with content use case, which helps you use content personalized by interest to nurture leads or customers:
And this table shows the source and destination types that Segment recommends you set up for the Nurture with content use case:
This table shows the events and properties Segment recommends you track for the Personalize upsell content use case, which helps you personalize upsell and cross-sell messaging while understanding behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize upsell content use case:
This table shows the events and properties Segment recommends you track for the Personalize winback use case, which helps you design personalized messaging based on user behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize winback use case:
Personalize communications and product experiences
Click on each use case in this section to view Segment’s recommendations for the Personalize communications and product experiences business goal, which helps you engage your customers with relevant content.
This table shows the events and properties Segment recommends you track for the Accelerate onboarding use case, which helps you optimize new user activation based on real-time behavior:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate onboarding use case:
This table shows the events and properties Segment recommends you track for the Increase repeat purchases use case, which helps you convert single-purchase buyers with personalized communications:
And this table shows the source and destination types that Segment recommends you set up for the Increase repeat purchases use case:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest-value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the events and properties Segment recommends you track for the Nurture with content use case, which helps you use content personalized by interest to nurture leads or customers:
And this table shows the source and destination types that Segment recommends you set up for the Nurture with content use case:
This table shows the events and properties Segment recommends you track for the Personalize upsell content use case, which helps you personalize upsell and cross-sell messaging while understanding behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize upsell content use case:
This table shows the events and properties Segment recommends you track for the Personalize winback use case, which helps you design personalized messaging based on user behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize winback use case:
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Use Cases Setup
On this page
Use Cases help you onboard quickly and efficiently to Segment by guiding you through specific steps tailored to your business needs.
This page walks you through the steps to set up a use case in your Segment instance.
Permissions
To implement a use case, you’ll need to be a Workspace Owner for your Segment account. See theRolesdocumentation for more information.
You can onboard to Segment with a Use Case if you’re a new Business Tier customer or haven’t yet connected a source and destination.
Use case setup overview
From a high level, setting Segment up with a use case takes place in four stages:
Example setup: Personalize winback
This section provides a detailed, step-by-step guide to setting up thePersonalize Winbackuse case from thePersonalize communications and product experiencesbusiness goal in your Segment account. All use cases follow this same setup flow.
Step 1: Navigate to Use Cases
Step 2: Pick your business goal and select a use case
Choosing a use case
Segment lets you implement one use case. If you’re not sure which use case to choose, viewChoosing a Use Case.
For most cases, you’ll want to start with development or staging sources to test and debug your Segment implementation. This approach lets you verify that everything is working correctly before sending live data downstream. To facilitate this, Segment automatically creates development (dev) and production (prod) spaces for you and labels your sources accordingly to simplify tracking.
Segment strongly recommends beginning your setup in the dev environment. This allows for thorough testing and debugging of your configuration. Once you’re confident in your dev setup, Segment will guide you on how to apply these configurations to your live production sources.
Step 3: Review suggested events
Changing your use case
Once you’ve reviewed the suggested events for a use case, you won’t be able to change the use case. If you want to see a full breakdown of each use case before commiting to one, clickChange use caseto begin the use case flow again. You can also view theUse Cases Reference guideto see what Segment recommends for each use case.
On theSetup checklistpage, you’ll see the full checklist for the use case you’ve chosen. This checklist applies to all use cases, though the suggested events, sources, and destinations differ between use cases.
This table shows Segment’s recommended events and properties for the Personalize winback use case:
Make sure that you’re tracking these events to get the most of the Personalize winback campaign. For more information on event tracking, seeData Collection Best Practices.
Step 4: Connect dev sources
You’re now ready to connect sources to your dev environment.
Adding a warehouse as a souce
If you connect a warehouse as a source, Segment automatically creates a Profiles destination that shows up in theConnect your datatab. Do not delete this destination, as Segment requires this destination to create profiles from your warehouse.
Cloud object sources
If you connect a cloud object source, you’ll need to create a warehouse to sync profiles into Segment. For more information, seeCloud Sources.
Step 5: Connect dev destinations
With sources connected, you can now connect destinations to your dev environment.
Step 6: Publish your setup to a prod environment
Until this point, you’ve set up event tracking and connected sources and destinations to a development environment.
After you’ve confirmed that data is flowing from your sources into your destinations as expected, you’re ready to publish your setup to a production environment.
Your data is now in production, and you’ve successfully configured Segment.
Activate your data with Unify and Engage
Now that you’ve successfully set up Connections and Destinations, you can build upon your Segment implementation with Unify and Engage.
Accessing Unify and Engage
Unify and Engage may not yet be enabled for your account. To add Engage to your Segment workspace, clickRequest a demoin the Unify and Engage tabs on the Guided Setup page.
Step 1: Set up identifiers with Unify
Your identifiers are now set up in your dev space, though it could take a few minutes for Segment to create profiles from your selected identifiers.
For more information, see theUnify documentation.
Step 2: Create audiences with Engage
Segment then begins sending your new audience(s) to the destinations in your dev environment. Verify in those destinations that the audiences are coming through as intended, then clickMark complete.
For more information on Audiences, see theEngage documentation.
Step 3: Republish to a prod environment
At this point, you’ll have already published your initial setup to a prod environment. Next, you’ll publish your Unify and Engage setup to the same prod environment.
Segment then begins sending your new audience(s) to the destinations in your dev environment. Verify in those destinations that your audiences are coming through as intended, then clickMark complete.
Next steps
Use Cases pulls together a number of core Segment features, likeSources,Destinations,data collection, andReverse ETL. View the documentation for each to learn how you can continue to expand and build on what you’ve alreay achieved.
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Use Cases Reference
On this page
This reference guide provides detailed information on the suggested events, sources, and destinations for each Segment use case. Use this guide to ensure you’re tracking the right events and connecting the best sources and destinations for your specific needs.
Use Cases by business goal
The business goal you select during onboarding determines the use cases that Segment shows you.
This table lists each business goal and each of its corresponding use cases:
Suggested events, sources, and destinations
This section contains tables for the different events, sources, and destinations that Segment recommends for each use case.
Optimize advertising
Click on each use case in this section to view Segment’s recommendations for the Optimize advertising business goal, which helps you improve return on ad spend.
This table shows the event and properties Segment recommends you track for the Build high value lookalikes use case, which helps you build from high-value purchasers through specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build high-value lookalikes use case:
This table shows the events and properties Segment recommends you track for the Build lookalikes for app install use case, which helps you build lookalikes from app installers in specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build lookalikes for app install use case:
This table shows the events and properties Segment recommends you track for the Increase signups with lookalikes use case, which helps you build lookalikes from signups through specific channels.:
And this table shows the source and destination types that Segment recommends you set up for the Increase signups with lookalikes use case:
This table shows the events and properties Segment recommends you track for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the event and properties Segment recommends you track for the Suppress based on time use case, which helps you suppress users after a few days to keep campaigns fresh:
And this table shows the source and destination types that Segment recommends you set up for the Suppress based on time use case:
This table shows the events and properties Segment recommends you track for the Suppress with purchase use case, which helps you suppress converted users immediately after a conversion:
And this table shows the source and destination types that Segment recommends you set up for the Suppress with purchase use case:
Personalize first conversion
Click on each use case in this section to view Segment’s recommendations for the Personalize first conversion business goal, which helps you convert prospective or free customers.
This table shows the events and properties Segment recommends you track for the Accelerate app install use case, which helps you encourage app install with personalized messaging:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate app install use case:
This table shows the events and properties Segment recommends you track for the Accelerate onboarding use case, which helps you optimize new user activation based on real-time behavior:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate onboarding use case:
This table shows the events and properties Segment recommends you track for the Accelerate signup use case, which helps you encourage anonymous users to sign up with messaging:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate signup use case:
This table shows the events and properties Segment recommends you track for the Acquire paid subscriptions use case, which helps you engage customers at the right time to drive conversions:
And this table shows the source and destination types that Segment recommends you set up for the Acquire paid subscriptions use case:
This table shows the events and properties Segment recommends you track for the Convert trials to paid subscriptions use case, which helps you get customers to upgrade through personalized messaging:
And this table shows the source and destination types that Segment recommends you set up for the Convert trials to paid subscriptions use case:
This table shows the events and properties Segment recommends you track for the Mitigate cart abandonment use case, which helps you win back users to drive purchases and understand funnel:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate cart abandonment use case:
Boost retention, upsell, and cross-sell
Click on each use case in this section to view Segment’s recommendations for the Boost retention, upsell, and cross-sell business goal, which helps you increase repeat visits or purchases.
This table shows the event and properties Segment recommends you track for the Build high value lookalikes use case, which helps you build from high-value purchasers through specific channels:
And this table shows the source and destination types that Segment recommends you set up for the Build high value lookalikes use case:
This table shows the events and properties Segment recommends you track for the Increase repeat purchases use case, which helps you convert single-purchase buyers with personalized communications:
And this table shows the source and destination types that Segment recommends you set up for the Increase repeat purchases use case:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest-value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the events and properties Segment recommends you track for the Nurture with content use case, which helps you use content personalized by interest to nurture leads or customers:
And this table shows the source and destination types that Segment recommends you set up for the Nurture with content use case:
This table shows the events and properties Segment recommends you track for the Personalize upsell content use case, which helps you personalize upsell and cross-sell messaging while understanding behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize upsell content use case:
This table shows the events and properties Segment recommends you track for the Personalize winback use case, which helps you design personalized messaging based on user behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize winback use case:
Personalize communications and product experiences
Click on each use case in this section to view Segment’s recommendations for the Personalize communications and product experiences business goal, which helps you engage your customers with relevant content.
This table shows the events and properties Segment recommends you track for the Accelerate onboarding use case, which helps you optimize new user activation based on real-time behavior:
And this table shows the source and destination types that Segment recommends you set up for the Accelerate onboarding use case:
This table shows the events and properties Segment recommends you track for the Increase repeat purchases use case, which helps you convert single-purchase buyers with personalized communications:
And this table shows the source and destination types that Segment recommends you set up for the Increase repeat purchases use case:
This table shows the event and properties Segment recommends you track for the Mitigate high value churn use case, which helps you anticipate churn for your highest-value users and prevent them from churning:
And this table shows the source and destination types that Segment recommends you set up for the Mitigate high value churn use case:
This table shows the events and properties Segment recommends you track for the Nurture with content use case, which helps you use content personalized by interest to nurture leads or customers:
And this table shows the source and destination types that Segment recommends you set up for the Nurture with content use case:
This table shows the events and properties Segment recommends you track for the Personalize upsell content use case, which helps you personalize upsell and cross-sell messaging while understanding behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize upsell content use case:
This table shows the events and properties Segment recommends you track for the Personalize winback use case, which helps you design personalized messaging based on user behavior:
And this table shows the source and destination types that Segment recommends you set up for the Personalize winback use case:
This page was last modified: 08 Oct 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Sending data to destinations
On this page
Once you’ve got data flowingintoSegment, what do you do with it? The Segment Destination catalog lists all of the places we can send your data.
Routing data to destinations
When you enable a destination in the Segment App, you link it to a specific source (or sources). By default, Segment first processes the data from the selected source(s), then translates it and routes it from the Segment servers to the API endpoint for that destination.
This means that if you previously had loaded code or a snippet for that tool on your website or app, you should remove it once you have Segment implemented so you don’t send duplicate data.
You might also want to enable tools that need to be loaded on the user’s device (either a computer or mobile device) in order to function properly. For our Analytics.js library, you can make these changes from the Segment App, and the Segment systems then update the bundle of code served when users request the page to include code required by the destination. You can read more about this in ourdocumentation on Connection Modes.
Adding new destinations
Adding a destination is quick and easy from the Segment App. You’ll need a token or API key for the tool, or some way to confirm your account in the tool.
Recommended destinations
If you’re just starting out, we know thecatalogcan be really overwhelming. How do you choose from all of the available destinations?
We’ve written a lot abouthow to choose your tools, but as a start, we recommend that you have one tool from each of the following categories:
If you’re adding more destinations after you’ve done your Segment instrumentation, you might want to check that the destinations you choosecan accept the methodsyou’re already using, and that they canuse the Connection Modesyou’re already using.
We also feel that it’s really important to have a data warehouse, so you can get aclearer view of all of your datafor analytics purposes. More on that just below.
Adding a warehouse
Warehouses are a special type of destination which receive streaming data from your Segment sources, and store it in a tableschema based on your Segment calls. This allows you to do a lot of interesting analytics work to answer your own questions about what your users are doing and why.
All customers can connect a data warehouse to Segment. Free and Team customers can connect one warehouse, while Business customers can connect as many as needed.
You should spend a bit of timeconsidering the benefits and tradeoffs of the warehouse options, and then choose one from Segment’swarehouse catalog.
When you choose a warehouse, you can then use the steps in the documentation to connect it. This may require that you create a new dedicated user (or “service user”) to allow Segment to access the database.
Once your warehouse is configured and running, you can connect to it using a Business Intelligence (BI) tool (such as Looker, Mode, Tableau, or others) to analyze your data in-depth.
There are also a number of Business tier features you can then use with your warehouse, includingselective syncandReplay.
Check out our course on warehouses in Segment University. (Must be logged in to access.)
Take your plans, and make them real.
Test your implementation and see where your data is and isn't arriving.
This page was last modified: 07 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Full Segment Implementation
On this page
Related content
Before you start implementing from your tracking plan, let’s review the Segment methods, what they do, and when you should use each.
Segment methods in detail
Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where.
There are six calls in the basic tracking API, which answer specific questions:
Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database.Objectsare described using “traits”, which you can collect as part of your calls.
The other three, Track, Page, and Screen, can be considered as increasingly specific types of events.Eventscan occur multiple times, but generate separate records which append to a list, instead of being updated over time.
A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen callsonlyoccur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls.
Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” Track event, because the Page/Screen calls automatically collect more contextual information.
Anatomy of a Segment message
The most basic Segment message requires only auserIDoranonymousID; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: thecommon fields, the“context” object, and the properties (if it’s an event) or traits (if it’s an object).
The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation.
Another common part of a Segment message istheintegrationsobject, which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options.
Identify calls
The Identify call allows Segment to knowwhois triggering an event.
When to call Identify
Call Identify when the user first provides identifying information about themselves (usually during log in), or when they update their profile information.
When called as part of the login experience, you should call Identify as soon as possible after the user logs in. When possible, follow the Identify call with a Track event that records what caused the user to be identified.
When you make an Identify call as part of a profile update, you only need to send the changed information to Segment. You can send all profile info on every Identify call if that makes implementation easier, but this is optional.
Learn More
Best Practices for Identifying Users
Traits in Identify calls
These are calledtraitsfor Identify calls, andpropertiesfor all other methods.
The most important trait to pass as part of the Identify call is userId, which uniquely identifies a user across all applications.
You should use a hash value to ensure uniqueness, although other values are acceptable; for example, email address isn’t the best thing to use as a userid, but is usually acceptable since it will be unique, and doesn’t change often.
Beyond that, the Identify call is your opportunity to provide information about the user that can be used for future reporting, so you should try to send any fields that you might want to report on later.
Consider using Identify and traits when:
How to Call Identify
You can call Identify from any of Segment’s device-based or server-based libraries, includingJavascript,iOS,Android,Ruby, andPython.
Here are two examples of calling Identify from two different libraries:
Using analytics.reset()
When a user explicitly signs out of one of your applications, you can callanalytics.reset()to stop logging further event activity to that user, and create a newanonymousIdfor subsequent activity (until the user logins in again and is subsequently identify-ed).This call is most relevant for client-side Segment libraries, as it clears cookies in the user’s browser.
Make areset()call as soon as possible after sign-out occurs, and only after it succeeds (not immediately when the user clicks sign out). For more info on this call,see the JavaScript source documentation.
Page and Screen
The Page and Screen calls tell Segment what web page or mobile screen the user is on. This call automatically captures important context traits, so you don’t have to manually implement and send this data.
Page and Screen call properties
You can alwaysoverride the auto-collected Page/Screen propertieswith your own, and set additional custom page or screen properties.
Some downstream tools (likeMarketo) require that you attach specific properties (like email address) to every Page call.
This is considered a destination-specific implementation nuance, and you should check the documentation for each destination you plan to use and make a list of these nuances before you start implementation.
Named Page & Screen Calls
You can specify a page “Name” at the start of the page or Screen call, which is especially useful to make list of page names into something more succinct for analytics. For example, on an ecommerce site you might want to callanalytics.page( "Product" )and then provide properties for that product:
When to Call Page
Segment automatically calls a Page event whenever a web page loads. This might be enough for most of your needs, but if you change the URL path without reloading the page, for example in single page web apps, you must call Page manually .
If the presentation of user interface components don’t substantially change the user’s context (for example, if a menu is displayed, search results are sorted/filtered, or an information panel is displayed on the exiting UI)measure the event with a Track call, not a Page call.
When you manually trigger a Page call, make sure the call happensafterthe UI element is successfully displayed, not when it is called. It shouldn’t be called as part of the click event that initiates it.
For more info on Page calls, reviewPage specandAnalytics.js docs.
When to call Screen
Segment Screen calls are essentially the Page method, except for mobile apps. Mobile Screen calls are treated similarly to standard Page tracking, only they contain more context traits about the device. The goal is to have as much consistency between web and mobile as is feasible.
Track calls
The Track call allows Segment to knowwhatthe user is doing.
When to call Track
The Track call is used to track user and system events, such as:
Events and Properties
Your Track calls should include both events and properties.Events are the actions you want to track, andproperties are the dataaboutthe event that are sent with each event.
Propertiesare powerful. They enable you to capture as much context about the event as you’d like, and then cross-tabulate or filter your downstream tools. For example, let’s say an eLearning website is tracking whenever a user bookmarks an educational article on a page. Here’s what a robust analytics.js Track call could look like:
With this Track call, we can analyze which authors had the most popular articles, which months and years led to the greatest volume of bookmarking overall, which button locations drive the most bookmark clicks, or which users gravitate towards infographics related to Data Planning.
Event Naming Best Practices
Each event you track must have a name that describes the event, like ‘Article Bookmarked’ above. That name is passed in at the beginning of the Track call, and should be standardized across all your properties so you can compare the same actions on different properties.
Segment’s best practice is to use an “Object Action” (Noun<>Verb) naming convention for allTrackevents, for example, ‘Article Bookmarked’.
Segment maintains a set ofBusiness Specswhich follow this naming convention around different use cases such as eCommerce, B2B SaaS, and Mobile.
Let’s dive deeper into the Object Action syntax that all Segment Track events should use.
Objects are Nouns
Nouns are the entities or objects that the user or the system acts upon.
It’s important to be thoughtful when naming objects so that they are referred to consistently within an application, and so that you refer to the same objects that might exist in multiple applications or sites by the same name.
Use the following list of objects to see if there is a logical match with your application. If you have objects that aren’t in this list, name it in a way that makes sense if it were to appear in other applications, and/or run it by Product Analytics.
Actions are Verbs
Verbs indicate the action taken by either a user on your site. When you name a new Track event, consider if you can describe the current interaction using a verb from the list below.
If you can’t, choose a verb that describes what the user is trying to do in your specific case, but try to be flexible enough so that you could use it in other scenarios.
Property naming best practices
Segment recommends that you record property names usingsnake case(for exampleproperty_name), and that you format property values to match how they are captured. For example, ausernamevalue would be captured in whatever case it the user typed it in as.
Ultimately, you can decide to use a casing different from our recommendations; however,the single most important aspect is that you’re consistent across your entire tracking with one casing method.
You can read more aboutbest practices for Track calls, .
All of the basicSegment methodshave a common structure and common fields which are automatically collected on every call. You can see these in thecommon fields documentation.
Common properties to send with a Track call
The following properties should be sent with every Track call:
How to call Track
You can make a Track call from any of Segment’s client-side or server-side libraries, includingJavaScript,iOS,Android,Ruby, andPython. Here are two examples of calling Track from two different libraries:
Think through your goals, plan your calls, and set yourself up for success.
Unlock the power of Segment with Destinations.
This page was last modified: 07 Feb 2025
Further reading
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Related content
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
How Segment Works
On this page
In a nutshell, the Segment libraries (Sources) generate messages about what’s happening in your site or app, and send them to the Segment servers. Segment then translates the content of those messages into different formats for use by other tools (which Segment callsDestinations), and sends the translated messages to those tools. The Segment servers also archive a copy of the data, and cansend data to your storage systems(such as databases, warehouses, or bulk-storage buckets).
Overview

Segment Spec methodsare how you collect interaction data from your interfaces, and theSourcesare what you package with your interfaces to collect and route the data.
Once you’ve collected your interaction data, there are several different actions you can take:
Sources for collecting data
You can collect data by implementing Segment’s tracking libraries as your Sources:
Sources for unique cases
Segment also offers these other source libraries to cover less straightforward cases:
Cloud App Sources
Segment also offersCloud App Sourcesto integrate data from your third-party tools:
How you can track data
Segment supports several ways to implement tracking. The two most common are to usedevice-basedorserver-basedlibraries. You can use Segment’s device-based libraries, such as JavaScript, iOS, and Android, to make calls on users’ browsers or mobile devices. You can also track data with Segment’s server-based libraries, such as Node, Python, or PHP, where the calls are triggered on your own servers and then sent to the Segment servers.
When you collect data using device-based libraries, you can choose between these two different connection modes:
Although there are some tradeoffs between the two approaches, neither is better than the other, and Segment recommends that you implement a mix of both. In general, more direct interaction data is available using a device-based library, but server-based collection is more secure, reliable, and can’t be blocked by ad blockers.
The Segment Methods
The Segment libraries generate messages about what happens on your interface, translate those messages into different formats for use by destinations, and transmit the messages to those tools.
There are severaltracking API methods, that you can call to generate messages. The four most important methods are:
Every call shares the samecommon fields. When you use these methodsas intended, it allows Segment to detect a specific type of data and correctly translate it to send it on to downstream destinations.
Where you can send data
Segment maintains a catalog of destinations where you can send your data.

Walk through a disposable, demo implementation.
This page was last modified: 21 Apr 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Getting Started Guide
On this page
Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment.
The guide is broken into three categories of tasks:
Basics
The tasks included in Basics help you send and debug your very first data from aSource(a library that sends data to Segment), and into aDestination(tools you use to analyze or act on your data).
The Basic tasks include:
Invite Teammates
Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools.
For example, as a developer, you might invite:
To invite team members to your workspace:
Add a Source
A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track.
To add a Source:
Learn More
Add page or screen tracking
Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen.
Learn how toinstall the Segment snippet or SDK on your website or mobile appto start sending data.
Learn More
Add a Destination
Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time.
To add a Destination:
Learn More
Testing and Debugging
The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send.
The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event:
To access your Source Debugger:
Learn More
Instrumentation
The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking.
The Instrumentation tasks include:
Send an Identify call
The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are.
An example of the types of details you might want to learn and track about your users in an Identify call are:
Learn More
Send a Track call
The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing.
Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties likeplanoraccountType.
To save time on instrumentation, be sure to check ifone of Segment’s Business Specsmeets your needs.
Learn More
Choose what to track
Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome.
For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey.
Segment maintains a number of industry or product-specific specs to help you get started:
Learn More
Event anatomy and naming standards
When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean.
Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing.
To view your event names in the Source Schema:
Learn More
Add a data warehouse
A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool.
A data warehouse also allows you to collect and compile data from third party tools asCloud Sourcesin Segment, to help you gain a 360 view of your customer touchpoints.
Learn More
Add more destinations
Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools.
With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels
To add more destinations:
Learn More
Optimization
The tasks in this phase help you to optimize your Segment implementation and take it to the next level.
The optimization tasks include:
Add more sources
Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.
Each touchpoint you have with your customers is a potential area to gain a better understanding of them.
To add more sources:
Learn More
Add a cloud source
Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer.
Before adding a cloud source, you need to make sure you:
Once you have the necessary credentials, to add a cloud source:
Learn More
Explore Protocols
Protocols automate and scale thedata quality best practicesdeveloped over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster.
There are steps to take when you use Protocols:
Learn More
Explore Engage
Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools.
Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis.
This page was last modified: 24 Jan 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
A Basic Segment Installation
On this page
When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define.
In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”).
The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library.
Before you begin
Before you start your Segment implementation, you need:
Tip! If you don’t have any of those things, consider creating a simpleGitHub Pages website.
Create separate dev and prod sources
When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data.
You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label.
Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place.
Create a Segment source
To create a Segment source:
Find your write key
The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data.
To find your write key:
Make note of or write down your write key, as you’ll need it in the next steps.
Any time you change a library’s settings in the Segment App, the write key regenerates.

Cloud-sourcesdo not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial.
Installing Segment
Click a tab below to see the tutorial content for the specific library you chose.
Step 1: Copy the Snippet
Navigate toConnections > Sources > JavaScriptin the Segment app, copy the snippet from the JavaScript Source overview page, and paste it into thetag of your site.That snippet loads Analytics.js onto the pageasynchronously, so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically.
The Segment snippet version history available onGitHub. Segment recommends that you use the latest snippet version whenever possible.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in theidentify method reference.
You don't need to call `identify` for anonymous visitors to your site
Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine withoutidentify.
Here’s an example of what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.To do that, Segment recommends that you use a backend template to inject anidentifycall into the footer ofevery pageof your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to callidentifyif your unique identifier (userId) is not known.Depending on your templating language, your actual identify call might look something like this:
With that call in your page footer, you successfully identify every user that visits your site.
You’ve completed a basic CRM set up. Return to the Segment app to enable Salesforce, Intercom, or your CRM system of choice and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.Here’s an example of what a call totrackmight look like when a user signs up:
This example shows that your user triggered theSigned Upevent and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Once you add a fewtrackcalls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App.
Step 1: Install the SDK
To install Analytics-iOS, Segment recommends you to useCocoaPods, because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade.1) Add theAnalyticsdependency to yourPodfileby adding the following line:
2) In your application delegate’s- application:didFinishLaunchingWithOptions:method, set up the SDK like so:

You don’tneedto use initialization config parameters to track lifecycle events (Application Opened,Application Installed,Application Updated) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events.
3) Import the SDK in the files that you use it by adding the following line:

To keep the Segment SDK lightweight, theAnalyticspod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the datafrom Segment.Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions onhow to bundle the destination tools.Now that the SDK is installed and set up, you’re ready to start making calls.
Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify reference.Here’s an example of what a basic call toidentifymight look like:
This call identifies Michael by his unique User ID (f4ca124298, which is the one you know him by in your database) and labels him withnameandemailtraits.
When you put the above code in your iOS app, you would replace those hard-coded trait values with variables that represent the details of the user that’s currently signed in.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more abouttrackin thetrack method reference.
The Segment iOS SDK can automatically track a few important common events, such asApplication Installed,Application Updated, andApplication Opened. You can enable this option during initialization by adding the following lines:
You should also track events that indicate success in your mobile app, likeSigned Up,Item Purchased, orArticle Bookmarked. Segment recommends that you track a few important events as you can always add more later.Here’s what atrackcall might look like when a user signs up:
This tells us that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan.Properties can be anything you want to record, for example:
Once you’ve added a fewtrackcalls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace.
Step 1: Download the library
To install the library:1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user,you can use this.)
2) Add the following to your PHP script to load the Segment analytics library in your code:
3) In your initialization script, make the following call (In the example, Segment first renames this module toAnalyticsfor convenience):
4) ReplaceYOUR_WRITE_KEYwith the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to/dev/null.You only need to callinitonce when your php file is requested. All of your files then have access to the sameAnalyticsclient.
Segment’s default PHP consumer is thelibcurl consumer. If this is not working well for you or if you have a high-volume project, you might try one of Segment’s other consumers like thefork-curl consumer.

Step 2: Identify Users
Theidentifymethod is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them.Here’s what a basic call toidentifymight look like:
This identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.
When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a$uservariable in memory.
With that call on the page, you’re now identifying every user that visits your site.If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.

Step 3: Track Actions
Thetrackmethod is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties.Here’s what a call totrackmight look like when a user signs up:
This tells us that the user triggered theSigned Upevent, and chose your hypotheticalEnterpriseplan.Properties can be anything you want to record, for example:
If you’re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.To get started, Segment recommends you to track track a few important events as you can always add more later.

Step 4: Flush the data
Call the Segmentflush()method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe.
You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App.
Test that it’s working
Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected.
The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing.

The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source.
Tip: To see a more complete view of all your events, you might consider setting up either awarehouseor anS3 destination.
The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed.
You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event.

Two views are available when viewing a payload:
Set up your first destination
Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you havepageorscreendata coming from the source, you can quickly enable Google Analytics to look at the page view statistics.
If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable.
You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination.
To set up your first destination:
Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place.
You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool.
Note:When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later.
The basics of the Segment platform and what you can do with it.
Think through your goals, plan your calls, and set yourself up for success.
This page was last modified: 20 Feb 2025
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
Planning a Full Installation
On this page
Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps:
Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later.
Define Business Objectives
Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started:
While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base?
The best way to answer this question is to interview stakeholders in your organization who will consume the data.
With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people takebeforesigning up? Do specific actions predict a user signing up?
As an example, you might end up with a list like this:
While this list represents a tiny fraction of the user actions youcouldtrack, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks.
Decide what to collect
With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app
When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs.
Shortcut: Check if a Business Spec meets your needs
Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs.
If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate.
If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more abouthow Segment thinks about B2B tracking, andread more about the B2B Spec.
If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more aboutwhy companies need an Ecommerce Spec, read more aboutEcommerce tracking plans, and dive directly into ourEcommerce Spec.
The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use theSegment Android and iOS SDKs. Read more about thebenefits of the native mobile spec, or read throughthe Native Mobile Specdirectly.
Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You canread more about our Video Spec.
Create naming conventions
Regardless of approach, here are some important best practices to keep in mind:
Pick a casing convention:We recommendTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.
Pick an event name structure:As you may have noticed from ourspecs, we’re big fans of the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.
Don’t create event names dynamically:Avoid creating events that pull a dynamic value into the event name (for example,User Signed Up (11-01-2019)). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat.
Don’t create events to track properties:Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like"blog_post_title":"Best Tracking Plans Ever".
Don’t create property keys dynamically:Avoid creating property names like"feature_1":"true","feature_2":"false"as these are ambiguous and very difficult to analyze

Got all that? Great. You’re now ready to develop a Tracking Plan.
Develop a tracking plan
Atracking planclarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective).A good tracking plan represents the single source of truth about what data you collect, and why.
Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool,Protocols), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users.
Plan your Identify and Group calls
The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?
The example below shows an Identify call usinganalytics.js) for Segment:
The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.
When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information.
The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account.
Plan your Track events
We recommend starting with fewer events that are directly tied to one of yourbusiness objectives, to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions.
At Segment, we started out tracking these events:
Then we added some peripheral events to to better understand how we’re performing, for the following reasons:
For an Ecommerce company, however, the main events might be something like:
Tip: As mentionedabove, Segment has a set of “reserved” event names specifically for ecommerce, called theEcommerce Spec. Check it out to see which events Segment covers and how they are used in downstream destinations.
An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like:
With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more inthis article from the online community GrowthHackersabout the events they track and why.
Define your Track event properties
Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events.
Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment,Business Tier Workspace Createdis a horrible event name. Instead, we usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:
Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.
Don’t create dynamically generated property names in the properties dictionary. Eachkeycreates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later.
Here is Segment’sLead CapturedTrack call:
The high-level event isLead Captured, and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site.
If you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.
Plan for destination tools
Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. TheSegment destination catalogcontains hundreds of tools, many of which you’ll be familiar with already.
If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations.
Once you have an initial list of the destination tools your organization uses, you can also checkwhich Segment methods those tools accept. This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for.
Additionally, you should checkwhich connection modes each tool supports, so you know ahead of time which destinations may need to be bundled.
Tip: If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check theConnection Modes by category pageto see which tools might be compatible with the least implementation changes.
Walk through a disposable, demo implementation.
Take your plans, and make them real.
This page was last modified: 30 Mar 2023
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Help improve these docs!
Was this page helpful?
Thanks for your feedback!
Can we improve this doc?Send us feedback!
Get started with Segment
On this page
Was this page helpful?
Thanks for your feedback!
Can we improvethis doc?Send us feedback!
Product
For Developers
Company
Support
© 2025 Segment.io, Inc.
